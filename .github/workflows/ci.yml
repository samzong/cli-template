name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  GO_VERSION: ">=1.21.0"

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: make install-deps

      - name: Check formatting
        run: |
          make fmt
          if ! git diff --quiet; then
            echo "Code is not properly formatted"
            echo "Run 'make fmt' to fix formatting issues"
            git diff
            exit 1
          fi

      - name: Run linter
        run: make lint

      - name: Check go mod tidy
        run: |
          go mod tidy
          if ! git diff --quiet go.mod go.sum; then
            echo "go.mod/go.sum is not tidy"
            echo "Run 'go mod tidy' to fix"
            git diff go.mod go.sum
            exit 1
          fi

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.21", "1.22", "1.23"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run tests
        run: go test -v -race ./...

      - name: Run benchmarks
        run: go test -v -bench=. -benchmem ./...

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: "-fmt sarif -out results.sarif ./..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check for known vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Analyze dependencies
        run: |
          echo "Analyzing Go dependencies..."
          go list -m -json all | jq -r '.Path' | sort | uniq | wc -l | xargs echo "Total dependencies:"
          echo "Direct dependencies:"
          go list -m -json all | jq -r 'select(.Main != true and .Indirect != true) | .Path'

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build for current platform
        run: make build

      - name: Verify binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./bin/mycli.exe --version
          else
            ./bin/mycli --version
          fi

      - name: Cross-compile check
        if: matrix.os == 'ubuntu-latest'
        run: make build-all

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check documentation
        run: |
          echo "Checking documentation..."
          if [ ! -f README.md ] || [ ! -s README.md ]; then
            echo "README.md is missing or empty"
            exit 1
          fi
          if ! grep -q "## Installation" README.md; then
            echo "README.md should include Installation section"
          fi
          if ! grep -q "## Usage" README.md; then
            echo "README.md should include Usage section"
          fi
          echo "Documentation check passed"

  integration:
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: make build

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          ./bin/mycli --help
          ./bin/mycli --version
          if ./bin/mycli config --help > /dev/null 2>&1; then
            echo "Config command available"
          fi
          echo "Integration tests passed"

  ci-summary:
    runs-on: ubuntu-latest
    needs:
      [
        quality,
        test,
        coverage,
        security,
        dependency-check,
        build,
        docs,
        integration,
      ]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "CI Summary:"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docs: ${{ needs.docs.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          if [[ "${{ needs.quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "CI failed - required jobs did not pass"
            exit 1
          fi
          echo "All CI checks passed!"
